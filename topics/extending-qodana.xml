<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/stardust/html-entities.dtd">

<topic xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/stardust/topic.v2.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       title="Extending Qodana"
       id="extending-qodana">

    <var name="struct-search" value="www.jetbrains.com/help/idea/tutorial-work-with-structural-search-and-replace.html#ssr_inspection_settings"/>

    <p>Although %product% provides <a href="qodana-yaml.md">various profiles</a> for inspecting your code, it may be
        useful to analyze your codebase using third-party inspections that are not covered by standard %product% profiles.
        This can done in several ways, such as: </p>

    <list>
        <li><a anchor="extending-qodana-marketplace-plugins">Using plugins from JetBrains Marketplace</a></li>
        <li><a anchor="extending-qodana-structural-search">Creating Structural search-based inspections</a></li>
        <li>Developing plugins from scratch.</li>
    </list>

    <chapter id="extending-qodana-marketplace-plugins" title="Plugins from JetBrains Marketplace">

        <p><a href="https://plugins.jetbrains.com/">JetBrains Marketplace</a> provides plugins for inspecting code in
            the IDE. These plugins can be used to extend the %product% inspection functionality.</p>

    <p>Before using a third-party plugin, you need to accomplish these steps:</p>
    <list>
        <li>Install the plugin to your IDE and enable it</li>
        <li>Create an XML-formatted profile file containing the enabled inspections</li>
        <li>Mount the plugin file to the %product% linter image</li>
        <li>Specify the profile file in <code>qodana.yaml</code>.</li>
    </list>

    <!-- The first two parameters are described here: https://www.jetbrains.com/help/idea/directories-used-by-the-ide-to-store-settings-caches-plugins-and-logs.html#config-directory -->
    <!-- This is where the profile file is contained: ~/.config/JetBrains/IntelliJIdea2021.2/inspection -->
    <!-- This path contains files for additional configuration ~/.config/JetBrains/IntelliJIdea2021.2/options -->
    <!-- This is the directory for containing the plugin file: /home/Anton.Samarin/.local/share/JetBrains/PhpStorm2021.3-->
    <!-- All other moments from the issue description should be reflected here as well -->

    <!-- This introduction can be deleted -->
    <p>This section explains how to inspect PHP code using the
        <a href="https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-">Php Inspections (EA Extended)</a>
        plugin and the <a href="qodana-php.md"/> linter. All actions taken in the IDE are explained for PhpStorm.
        You can reproduce these steps for any plugin from JetBrains Marketplace you would like to extend %product% with.</p>

    <procedure>
        <step>Install the plugin and enable it as explained in the
            <a href="https://www.jetbrains.com/help/phpstorm/managing-plugins.html">Php Inspections (EA Extended)</a>
            section on the PhpStorm documentation portal. </step>
        <step>Configure the inspections of the Php Inspections (EA Extended) plugin.</step>
        <step>Save the updated profile file containing the enabled plugin inspections in your IDE as described in the
            <a href="https://www.jetbrains.com/help/phpstorm/customizing-profiles.html">Configure profiles</a> section.
        </step>
        <step>
            <menupath>(Optionally)</menupath> You may need additional plugin configuration options that are usually configured in the
            <menupath>Settings</menupath> window of your IDE. Such file is available in the <code>options</code>
            subdirectory of the
            <a href="https://www.jetbrains.com/help/idea/directories-used-by-the-ide-to-store-settings-caches-plugins-and-logs.html#config-directory">configuration directory</a>
            of your IDE. In case of the
            <a href="https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-"/> plugin, this step may be
            required for specifying Yoda style rules.
        </step>
        <step>
            <p>In the project root directory, create the <code>qodana.yaml</code> file and specify the path to the
                <a href="qodana-yaml.md" anchor="Set+up+a+profile+by+the+path">profile</a> location:</p>
            <code style="block" lang="yaml">
                profile:
                    path: path/to/the/profile/file
            </code>
        </step>
        <step>
            <p>This is the snippet for running %product% locally using the plugin:</p>
            <code style="block" lang="bash">
                docker run --rm -p 8080:8080 \
                -v &lt;project-directory&gt;:/data/project/ \
                -v &lt;report-directory&gt;:/data/results/ \
                -v &lt;package-file&gt;:/opt/idea/plugins/&lt;package-file&gt; \
                -v &lt;plugin-config&gt;:/root/.config/idea/options/&lt;file-name&gt; \
                jetbrains/qodana-&lt;linter&gt; --show-report
            </code>
            <p>Here, <code style="inline">&lt;package-file&gt;</code> specifies the full path to the plugin package
                location including the full package filename. The <code style="inline">&lt;plugin-config&gt;</code> line
                denotes the full path to the XML-formatted file containing additional plugin configuration.</p>
        </step>
    </procedure>

        <!-- I need to add information about the PyLint and MyPy plugins -->
</chapter>

<chapter id="extending-qodana-structural-search" title="Structural search">

    <p><a href="https://www.jetbrains.com/help/idea/structural-search-and-replace.html">Structural search</a> lets you
    inspect your code based on a particular code pattern or grammatical construct.</p>

    <p>As an example, consider the following <a href="https://www.jetbrains.com/help/idea/search-templates.html">search template</a>:</p>
        <code style="block">$Instance$.$MethodCall$($Parameter$)</code>

    <p>This template lets you detect the <code lang="java">System.out.println()</code> Java statement with hardcoded text
        like <code lang="java">System.out.println("Hardcoded text!")</code>. This table describes the values of each
        variable that the search template can accept:</p>
    <table>
        <tr><td>Variable</td><td>Value</td><td>Explanation</td></tr>
        <tr><td>$Instance$</td><td>[0,1]</td><td>Accepts zero or one value.</td></tr>
        <tr><td>$MethodCall$</td><td>text=println</td><td>Searching for the <emphasis>println</emphasis> method.</td></tr>
        <tr><td>$Parameter$</td><td>text=^\".*\"$</td><td>Any text enclosed in quote characters.</td></tr>
    </table>

    <p>This procedure explains how use this search template for inspecting your codebase using %product%.</p>

    <procedure>
        <step>
            <p>Using the
                <menupath><a href="https://www.jetbrains.com/help/idea/structural-search-and-replace.html#to_search_structurally">Structural Search</a></menupath>
                dialog of IntelliJ IDEA, you can create the template as shown below:</p>
            <img src="extending-qodana-1.png" dark-src="extending-qodana-1_dark.png" alt="Search template" width="706" border-effect="line"/>
        </step>
        <step>
            <p>Convert the template to inspection as described in the
                <a href="https://%struct-search%">Work with structural search and replace</a> section of the
                IntelliJ IDEA documentation portal. For example, it can be saved as
                <code style="inline">Hardcoded-print</code>.</p>
        </step>
        <step>
            <p>In the <menupath>Settings</menupath> dialog, enable the inspection in the
                <menupath>Structural search</menupath> group of inspections. For more details, see
                the <a href="https://www.jetbrains.com/help/idea/customizing-profiles.html">Configure profiles</a>
                section.</p>
            <img src="extending-qodana-enabling-inspection.png" dark-src="extending-qodana-enabling-inspection_dark.png" alt="Enabling inspection" width="706" border-effect="line"/>
        </step>
        <step>
            <p>In the <menupath>Inspections</menupath> section of the <menupath>Settings</menupath> dialog, export the
                updated profile as described in the
            <a href="https://www.jetbrains.com/help/idea/customizing-profiles.html">Configure profiles</a> section.</p>
        </step>
        <step>
            <p>In the project root directory, create the <code>qodana.yaml</code> file and specify the path to the
                <a href="qodana-yaml.md" anchor="Set+up+a+profile+by+the+path">profile</a> location:</p>
            <code style="block" lang="yaml">
                profile:
                    path: path/to/the/profile/file
            </code>
        </step>
        <step>
            <p>Inspect your code using %product%:</p>
            <code style="block" lang="shell" prompt="$">
                docker run --rm -p 8080:8080 \
                -v $(pwd)/project/:/data/project/ \
                -v $(pwd)/report/:/data/results/ \
                jetbrains/qodana-jvm --show-report
            </code>
        </step>
        <step>
            <p>You can observe the problems detected by the structural search inspection under the
                <menupath>Structural search</menupath> category in the %product% report.</p>
            <img src="extending-qodana-ss-inspection-report.png" dark-src="extending-qodana-ss-inspection-report_dark.png" alt="Observing the Structural Search inspection results" width="706" border-effect="line"/>
        </step>
    </procedure>

</chapter>

    <!-- For a custom plugin, I will need to show the SARIF structure so that a user understands how they will need to export data -->

</topic>
